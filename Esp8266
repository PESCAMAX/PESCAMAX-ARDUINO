#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

const char* ssid = "Yulieth";
const char* password = "1090272690Y";
const char* serverUrl = "http://192.168.50.108:6754/api/Horas/recibirDatos";
ESP8266WebServer server(80);
const int loteID = 26;
const String userID = "ffdaa428-9d2d-47a1-b821-9e98c252efc4";

float temperature, tds, ph;
DynamicJsonDocument selectedHours(1024);

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

void handleRoot() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/plain", "Hello from esp8266 server web!");
}

void handleData() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  // Implementa aquí tu lógica para manejar datos
  server.send(200, "application/json", "{\"message\":\"Data endpoint\"}");
}

void handleCORS() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "POST,GET,OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  server.send(200, "text/plain", "");
}

void handleNotFound() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(404, "text/plain", "Uri not found " + server.uri());
}

void handleSetHours() {
  server.sendHeader("Access-Control-Allow-Origin", "*");

  if (!server.hasArg("plain")) {
    server.send(400, "text/plain", "Body not received");
    return;
  }

  String body = server.arg("plain");
  DeserializationError error = deserializeJson(selectedHours, body);

  if (error) {
    server.send(400, "text/plain", "Invalid JSON");
    return;
  }

  Serial.println("Received hours:");
  JsonArray hours = selectedHours["hours"].as<JsonArray>();
  for (JsonVariant v : hours) {
    int hour = v["hour"];
    String period = v["period"].as<String>();
    Serial.print("Hour: ");
    Serial.print(hour);
    Serial.print(", Period: ");
    Serial.println(period);
  }

  server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"Horas guardadas en ESP8266\"}");
}

void handleRandom() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  sendRandomData();
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");
  
  // Espera hasta que se conecte a WiFi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Configuración de rutas
  server.on("/", handleRoot);
  server.on("/data", HTTP_GET, handleData);
  server.on("/random", HTTP_GET, handleRandom);
  server.on("/setHours", HTTP_OPTIONS, handleCORS);
  server.on("/getHours", HTTP_GET, handleGetHours);
  server.on("/setHours", HTTP_POST, handleSetHours);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");

  timeClient.begin();
  timeClient.setTimeOffset(-18000); // Configura la zona horaria en segundos
}

void handleGetHours() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  String json;
  serializeJson(selectedHours, json);
  server.send(200, "application/json", json);
}

void sendRandomData() {
  float randomTemperature = random(150, 300) / 10.0;
  float randomTds = random(0, 1000) / 10.0;
  float randomPh = random(0, 140) / 10.0;
  
  StaticJsonDocument<200> doc;
  doc["Temperatura"] = randomTemperature;
  doc["tds"] = randomTds;
  doc["ph"] = randomPh;
  doc["loteID"] = loteID;
  doc["userID"] = userID;
  
  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void sendDataToServer(float temp, float tdsValue, float phValue) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Attempting to reconnect...");
    WiFi.begin(ssid, password);
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("Failed to reconnect to WiFi. Aborting data send.");
      return;
    }
    Serial.println("Reconnected to WiFi");
  }

  WiFiClient client;
  HTTPClient http;
  
  StaticJsonDocument<200> doc;
  doc["Temperatura"] = temp;
  doc["tds"] = tdsValue;
  doc["ph"] = phValue;
  doc["loteID"] = loteID;
  doc["userID"] = userID;
  
  String json;
  serializeJson(doc, json);

  Serial.print("Connecting to server: ");
  Serial.println(serverUrl);

  http.begin(client, serverUrl);
  http.addHeader("Content-Type", "application/json");
  
  int httpResponseCode = http.POST(json);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    Serial.println("Response: " + response);
    Serial.println("Data successfully sent to server at " + String(timeClient.getHours()) + ":" + String(timeClient.getMinutes()));
  } else {
    Serial.print("Error on sending POST: ");
    Serial.println(httpResponseCode);
    Serial.println("Error: " + http.errorToString(httpResponseCode));
  }
  
  http.end();
}

void loop() {
  server.handleClient();
  timeClient.update();
  
  static unsigned long lastCheckTime = 0;
  unsigned long currentMillis = millis();

  // Verifica cada minuto
  if (currentMillis - lastCheckTime >= 60000) {
    lastCheckTime = currentMillis;

    int currentHour = timeClient.getHours();
    int currentMinute = timeClient.getMinutes();
    
    Serial.print("Hora actual: ");
    Serial.print(currentHour);
    Serial.print(":");
    Serial.println(currentMinute);

    JsonArray hours = selectedHours["hours"].as<JsonArray>();
    for (JsonVariant v : hours) {
      int hour = v["hour"];
      String period = v["period"].as<String>();
      
      if (hour == currentHour % 12 && 
          ((period == "AM" && currentHour < 12) || (period == "PM" && currentHour >= 12)) &&
          currentMinute == 0) {
        // Genera y envía datos aleatorios
        float randomTemperature = random(150, 300) / 10.0;
        float randomTds = random(0, 1000) / 10.0;
        float randomPh = random(0, 140) / 10.0;
        
        sendDataToServer(randomTemperature, randomTds, randomPh);
        
        Serial.println("Random data sent to server at " + String(currentHour) + ":" + String(currentMinute));
      }
    }
  }
}
